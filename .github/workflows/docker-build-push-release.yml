name: Docker Build, Push, and Release

on:
  push:
    branches:
      - main

env:
  # Existing ENVs
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ vars.LOWERCASE_ORG }}/${{ github.event.repository.name }} # For GHCR
  KEEP_RELEASES: 10
  KEEP_IMAGES: 10

  # --- Google Cloud ENVs ---
  # Ensure these secrets (GCP_PROJECT_ID, GCP_WORKLOAD_IDENTITY_PROVIDER, GCP_SERVICE_ACCOUNT_EMAIL)
  # and variables (GAR_LOCATION) are configured in your GitHub repository/organization settings for this new project.
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  # projects/YOUR_PROJECT_NUMBER/locations/global/workloadIdentityPools/YOUR_POOL_ID/providers/YOUR_PROVIDER_ID
  GCP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
  GCP_SERVICE_ACCOUNT_EMAIL: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}
  GAR_LOCATION: 'us-central1' # Or your preferred GCP region for Artifact Registry
  GAR_REPOSITORY: ${{ github.event.repository.name }} # Assumes GAR repository name matches GitHub repo name
  GAR_IMAGE_NAME: ${{ github.event.repository.name }} # Assumes GAR image name matches GitHub repo name
  # --- END Google Cloud ENVs ---

jobs:
  build-push-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      pull-requests: read
      id-token: write # Required for Google Cloud Workload Identity Federation

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from package.json
        id: package-version
        run: echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          # Note: Using yarn.lock here, assuming this project also uses Yarn like the previous one for UI.
          # If it uses npm, change to '**/package-lock.json'
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ steps.package-version.outputs.VERSION }}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Build and push Docker image (to GitHub Packages)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }} # Using tags generated by metadata action for GHCR
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      # --- START: Steps for Google Cloud Artifact Registry ---
      - name: Authenticate to Google Cloud
        id: gcp-auth # This step sets up gcloud with WIF
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ env.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ env.GCP_SERVICE_ACCOUNT_EMAIL }}

      - name: Get Access Token via gcloud
        id: gcloud_token_generation
        run: |
          echo "Retrieving access token using gcloud..."
          gcloud_token=$(gcloud auth print-access-token)
          if [ -n "$gcloud_token" ]; then
            echo "✅ Successfully retrieved access token via gcloud."
            echo "gcp_access_token=${gcloud_token}" >> $GITHUB_OUTPUT
          else
            echo "❌ Failed to retrieve access token via gcloud."
            gcloud auth list
            exit 1
          fi

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev --quiet

      - name: Login to Google Artifact Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GAR_LOCATION }}-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.gcloud_token_generation.outputs.gcp_access_token }}

      - name: Build and push Docker image (to Google Artifact Registry)
        id: build-push-gar
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GAR_REPOSITORY }}/${{ env.GAR_IMAGE_NAME }}:${{ steps.package-version.outputs.VERSION }}
            ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GAR_REPOSITORY }}/${{ env.GAR_IMAGE_NAME }}:latest
          labels: ${{ steps.meta.outputs.labels }} # Reusing labels from the 'meta' step
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Make Google Artifact Registry repository public
        if: success() # Only run if GAR push was successful
        run: |
          echo "Making Artifact Registry repository ${{ env.GAR_REPOSITORY }} public..."
          gcloud artifacts repositories add-iam-policy-binding ${{ env.GAR_REPOSITORY }} \
            --project=${{ env.GCP_PROJECT_ID }} \
            --location=${{ env.GAR_LOCATION }} \
            --member=allUsers \
            --role=roles/artifactregistry.reader
        # This command is idempotent.
        # The service account needs 'roles/artifactregistry.admin' or equivalent on the project/repository.
      # --- END: Steps for Google Cloud Artifact Registry ---

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      # Trivy scan (optional, commented out)
      # - name: Scan Docker image for vulnerabilities
      #   uses: aquasecurity/trivy-action@master
      #   env:
      #     TRIVY_USERNAME: ${{ github.actor }}
      #     TRIVY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.package-version.outputs.VERSION }}
      #     format: 'table'
      #     exit-code: '1'
      #     ignore-unfixed: true
      #     vuln-type: 'os,library'
      #     severity: 'CRITICAL,HIGH'

      - name: Get Pull Request Messages
        id: pr-messages
        run: |
          PR_MESSAGES=$(git log --merges --format="%b" @~1..HEAD | sed 's/^/* /')
          echo "PR_MESSAGES<<EOF" >> $GITHUB_OUTPUT
          echo "$PR_MESSAGES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.package-version.outputs.VERSION }}
          release_name: Release v${{ steps.package-version.outputs.VERSION }}
          body: |
            ## Docker Image (GitHub Packages)
            Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.package-version.outputs.VERSION }}

            ## Docker Image (Google Artifact Registry - Public)
            Image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GAR_REPOSITORY }}/${{ env.GAR_IMAGE_NAME }}:${{ steps.package-version.outputs.VERSION }}

            ## Pull Request Messages
            ${{ steps.pr-messages.outputs.PR_MESSAGES }}

            ## Security Scan
            A security scan was performed on this Docker image. Any critical or high vulnerabilities would have prevented this release.
          draft: false
          prerelease: false